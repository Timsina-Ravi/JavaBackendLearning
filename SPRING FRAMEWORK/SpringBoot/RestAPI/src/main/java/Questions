--------------------------Basic CRUD with just Arraylist-----------------------

-
 1. Book Management API

Objective:
Create a REST API to manage a collection of books.

Model:
`Book` should contain:
- `int id`
- `String title`
- `String author`

Endpoints to Create:
1. `POST /api/books` – Add a new book
2. `GET /api/books` – Return all books
3. `GET /api/books/{id}` – Return a book by its ID
4. `PUT /api/books/{id}` – Update a book’s title by ID
5. `DELETE /api/books/{id}` – Delete a book by ID



 2. Student Management API

Objective:
Create a REST API to manage student data.

Model:
`Student` should contain:
- `int id`
- `String name`
- `int age`
- `String grade`

Endpoints to Create:
1. Add a student
2. View all students
3. View student by ID
4. Update a student’s grade
5. Delete a student by ID




 3. To-Do List API

Objective:
Build an API to manage a to-do list.

Model:
`Task` should contain:
- `int id`
- `String title`
- `String status` (e.g., "Pending", "Completed")

Endpoints:
1. Add a new task
2. Get all tasks
3. Update task status by ID
4. Delete a task by ID



 4: Daily Mood Tracker API

Problem Statement:

 Model: MoodEntry
     int id;
     String date;
     String mood;
     String note;


Endpoints:
1.  List all mood entries
2.  Get a specific mood entry
3.  Add a new mood entry
4.  Edit an existing mood entry
5.  Delete a mood entry





 5: Product Inventory API

Objective:
Build an API to manage different product types with varying pricing logic.

Concepts Covered:
- Abstraction via abstract class for `Product`
- Inheritance with `Electronics` and `Grocery`
- Polymorphism via method overriding
- Encapsulation in product fields
- Interface for price calculation
- Use `ArrayList<Product>` as storage

Endpoints:
1. Add an electronics product
2. Add a grocery product
3. Get all products
4. Get product and its price by ID
5. Update product name
6. Delete a product


---->

 6.  Fitness Tracker API

Objective:
Track user workouts with different activity types.

Concepts Covered:
- Abstract class: `Workout`
- Subclasses: `Running`, `Cycling`, etc.
- Polymorphism: `calculateCalories()`, `track()`
- Interface: `Trackable` with `trackWorkout()`
- Use `ArrayList<Workout>`

Model: Workout (abstract)

String id;
String userName;
int durationInMinutes;
String date;


Model: Running
double distanceKm;

Model: Cycling
String terrainType;

Endpoints:
1. Add a running workout
2. Add a cycling workout
3. View all workouts
4. View workout details
5. Update workout duration
6. Delete a workout

