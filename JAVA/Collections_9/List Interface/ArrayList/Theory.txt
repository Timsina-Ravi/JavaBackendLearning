 # List Interface

The `List` interface is part of Java's Collections Framework and represents an ordered
collection of elements. You can access elements by their index, and duplicates are allowed.

 Key Features of `List`:
- Ordered: Elements are stored in a sequence, accessed via index.
- Duplicates Allowed: You can have multiple occurrences of the same element.
- Random Access: Allows accessing elements using their index with methods like `get()` and `set()`.
- Flexible Iteration: You can iterate through the list using loops or iterators.

 Key Methods in `List` (Implemented by both `ArrayList` and `LinkedList`):

- `add(E e)`: Adds an element to the list.
- `get(int index)`: Retrieves an element at the specified index.
- `set(int index, E e)`: Modifies an element at a specific index.
- `remove(int index)`: Removes the element at a specific index.
- `size()`: Returns the number of elements in the list.
- `indexOf(Object o)`: Finds the index of the first occurrence of an element.
============================================================================================

1. `ArrayList`:

`ArrayList` is a Java class that implements the `List` interface and uses a dynamic array to
 store elements. It allows you to access elements by index and can grow or shrink as elements
  are added or removed. While it provides fast access to elements, insertions and deletions
   can be slower, especially in the middle, because the elements need to be shifted.

 Unique Methods for `ArrayList`

- `trimToSize()`: Reduces the internal array size to match the current number
of elements, helping save memory after removing elements.
- `ensureCapacity(int minCapacity)`: Increases the internal array size to make sure
it can hold at least the specified number of elements without needing to resize.

=========================================================================================

- Use `ArrayList` for quick element access and less frequent modifications.