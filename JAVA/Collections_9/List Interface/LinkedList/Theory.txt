# List Interface

The `List` interface is part of Java's Collections Framework and represents an ordered
collection of elements. You can access elements by their index, and duplicates are allowed.

 Key Features of `List`:
- Ordered: Elements are stored in a sequence, accessed via index.
- Duplicates Allowed: You can have multiple occurrences of the same element.
- Random Access: Allows accessing elements using their index with methods like `get()` and `set()`.
- Flexible Iteration: You can iterate through the list using loops or iterators.

 Key Methods in `List` (Implemented by both `ArrayList` and `LinkedList`):

- `add(E e)`: Adds an element to the list.
- `get(int index)`: Retrieves an element at the specified index.
- `set(int index, E e)`: Modifies an element at a specific index.
- `remove(int index)`: Removes the element at a specific index.
- `size()`: Returns the number of elements in the list.
- `indexOf(Object o)`: Finds the index of the first occurrence of an element.
============================================================================================


2. `LinkedList`:
`LinkedList` is a class in Java that implements the `List` interface and is part of the
Java Collections Framework. It is a doubly linked list, where each element (node) contains
 references to both the next and previous elements. This allows efficient insertions and
deletions at both ends and in the middle, but accessing elements by index is slower compared to `ArrayList`.

   Unique Methods for  `LinkedList`:

- `addFirst(E e)`: Adds an element at the beginning of the list.
- `addLast(E e)`: Adds an element at the end of the list.
- `removeFirst()`: Removes the first element of the list.
- `removeLast()`: Removes the last element of the list.
- `peekFirst()`: Retrieves, but does not remove, the first element of the list.
- `peekLast()`: Retrieves, but does not remove, the last element of the list.


- Use `LinkedList` when you need fast insertions and removals, especially at the beginning or end