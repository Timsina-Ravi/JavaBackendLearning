

## ðŸŸ¢ LEVEL 1: Basic CRUD (Beginner)



 1. Book Management API

Objective:
Create a REST API to manage a collection of books.

Model:
`Book` should contain:
- `int id`
- `String title`
- `String author`

Endpoints to Create:
1. `POST /api/books` â€“ Add a new book
2. `GET /api/books` â€“ Return all books
3. `GET /api/books/{id}` â€“ Return a book by its ID
4. `PUT /api/books/{id}` â€“ Update a bookâ€™s title by ID
5. `DELETE /api/books/{id}` â€“ Delete a book by ID




==============================================================

 2. Student Management API

Objective:
Create a REST API to manage student data.

Model:
`Student` should contain:
- `int id`
- `String name`
- `int age`
- `String grade`

Endpoints to Create:
1. Add a student
2. View all students
3. View student by ID
4. Update a studentâ€™s grade
5. Delete a student by ID


=====================================================================

 3. To-Do List API

Objective:
Build an API to manage a to-do list.

Model:
`Task` should contain:
- `int id`
- `String title`
- `String status` (e.g., "Pending", "Completed")

Endpoints:
1. Add a new task
2. Get all tasks
3. Update task status by ID
4. Delete a task by ID



## ðŸŸ¡ LEVEL 2: Intermediate â€“ Filters, Search, Sort



 4. Search Books by Title or Author

Objective:
Enable users to filter books by title or author name.

Endpoints:
1. `GET /api/books/search?title=Spring` â€“ Return books with matching title
2. `GET /api/books/author?name=John` â€“ Return books by specific author



 5. Sort Books by Title

Objective:
Provide functionality to sort the books list alphabetically.

Endpoint:
- `GET /api/books/sorted?order=asc|desc` â€“ Return sorted books list



 6. Pagination with Limit and Offset

Objective:
Add pagination to your API to load books in chunks.

Endpoint:
- `GET /api/books?page=1&size=5` â€“ Return only 5 books per page based on the given page number



 7. Product Inventory API

Objective:
Create a product management API with basic filters.

Model:
`Product`:
- `int id`
- `String name`
- `double price`
- `int stock`

Endpoints:
1. Add product
2. Get all products
3. Get products with stock < 10
4. Get products within a price range (e.g., min=100, max=500)



 8. Book Count Summary

Objective:
Return a summary count of all books and unique authors.

Endpoint:
- `GET /api/books/count`
Return response like:

{
  "totalBooks": 10,
  "uniqueAuthors": 5
}




## ðŸ”´ LEVEL 3: Advanced Combined Concepts



 9. Simple Login System

Objective:
Create a user login system using only in-memory storage.

Model:
`User`:
- `int id`
- `String username`
- `String password`

Endpoints:
1. Register a user
2. Login: Check if username & password match
3. Return success or failure message



 10. Order and Product System

Objective:
Build a mini system to place orders and update product stock.

Models:
- `Product`: `id`, `name`, `stock`
- `Order`: `id`, `customerName`, `List<Integer> productIds`

Endpoints:
1. Add products
2. Place an order
3. Decrease product stock automatically
4. Reject order if any product is out of stock



 11. Update Specific Field Only (PATCH Style)

Objective:
Enable updating only 1 field without touching others.

Endpoints:
1. `PUT /api/books/{id}/title` â€“ Update only the title
2. `PUT /api/books/{id}/author` â€“ Update only the author



 12. Error Handling Practice

Objective:
Return meaningful error messages and HTTP statuses.

Requirements:
1. 404 when book not found
2. 400 if request body is invalid
3. 409 if ID already exists



## ðŸš€ BONUS Challenges (Optional)



 13. Recently Added Books

Objective:
Return the N most recent books added.

Endpoint:
- `GET /api/books/recent?limit=3` â€“ Return 3 most recently added books



 14. Soft Delete Feature

Objective:
Mark books as deleted without actually removing from list.

Model Update:
- Add `boolean isDeleted` to `Book`

Logic:
- Update delete endpoint to set `isDeleted = true`
- Return only non-deleted books in `GET /api/books`



 15. Book Summary Endpoint

Objective:
Return summary info about the books list.

Endpoint:
- `GET /api/books/summary`
Return response like:

{
  "totalBooks": 15,
  "uniqueAuthors": 7,
  "uniqueTitles": 13
}
