=======================================================================
‚úÖ PHASE 1: Basic CRUD with just Arraylist

-
 1. Book Management API

Objective:
Create a REST API to manage a collection of books.

Model:
`Book` should contain:
- `int id`
- `String title`
- `String author`

Endpoints to Create:
1. `POST /api/books` ‚Äì Add a new book
2. `GET /api/books` ‚Äì Return all books
3. `GET /api/books/{id}` ‚Äì Return a book by its ID
4. `PUT /api/books/{id}` ‚Äì Update a book‚Äôs title by ID
5. `DELETE /api/books/{id}` ‚Äì Delete a book by ID

==============================================================

 2. Student Management API

Objective:
Create a REST API to manage student data.

Model:
`Student` should contain:
- `int id`
- `String name`
- `int age`
- `String grade`
---------------------------------------------------------------------------------------
Endpoints to Create:
1. Add a student
2. View all students
3. View student by ID
4. Update a student‚Äôs grade
5. Delete a student by ID


=====================================================================

 3. To-Do List API

Objective:
Build an API to manage a to-do list.

Model:
`Task` should contain:
- `int id`
- `String title`
- `String status` (e.g., "Pending", "Completed")

Endpoints:
1. Add a new task
2. Get all tasks
3. Update task status by ID
4. Delete a task by ID

=================================================================================

 4: Daily Mood Tracker API

Problem Statement:

 Model: MoodEntry
     int id;
     String date;
     String mood;
     String note;


Endpoints:
1.  List all mood entries
2.  Get a specific mood entry
3.  Add a new mood entry
4.  Edit an existing mood entry
5.  Delete a mood entry

===========================================================================
==========================================================================


 ‚úÖ PHASE 2: Basic CRUD with ArrayList, LinkedList, HashMap, HashSet and OOPS (All pillars)

 üì¶ == ArrayList ==

 ‚úÖ 1. Product Inventory API

Objective:
Build an API to manage different product types with varying pricing logic.

Concepts Covered:
- Abstraction via abstract class for `Product`
- Inheritance with `Electronics` and `Grocery`
- Polymorphism via method overriding
- Encapsulation in product fields
- Interface for price calculation
- Use `ArrayList<Product>` as storage

Endpoints:
1. Add an electronics product
2. Add a grocery product
3. Get all products
4. Get product and its price by ID
5. Update product name
6. Delete a product

==============================================================================


 ‚úÖ 2. Fitness Tracker API

Objective:
Track user workouts with different activity types.

Concepts Covered:
- Abstract class: `Workout`
- Subclasses: `Running`, `Cycling`, etc.
- Polymorphism: `calculateCalories()`, `track()`
- Interface: `Trackable` with `trackWorkout()`
- Use `ArrayList<Workout>`

Model: Workout (abstract)

String id;
String userName;
int durationInMinutes;
String date;


Model: Running
double distanceKm;

Model: Cycling
String terrainType;

Endpoints:
1. Add a running workout
2. Add a cycling workout
3. View all workouts
4. View workout details
5. Update workout duration
6. Delete a workout


 üîÅ == LinkedList ==
 ‚úÖ 1. Book Rental API

Objective:
Manage a list of book rental users using `LinkedList`.

Concepts:
- `LinkedList<BookRental>`
- Interface: `Rentable` with method `rentBook()`
- OOP: `Student` and `Teacher` as user types

Model: BookRental
String id;
String userName;
String bookTitle;
String rentalDate;
String userType;  // Student or Teacher


Endpoints:
1. Add user to the end of the list
2. View all users in the list
3. Rent book to a specific user (by ID)
4. Get user rental details
5. Update user details (name/type)
6. Remove user from list
7. Insert a user at a specific position (not by index logic, just middle/start/end)
8. Move user to top of the list (simulate priority)



 ‚úÖ 2. Hospital Appointment API

Objective:
Manage patient appointments using `LinkedList`.

Concepts:
- `LinkedList<Patient>`
- Interface: `AppointmentHandler` with method `scheduleAppointment()`
- Classes: `RegularPatient`, `EmergencyPatient`

Model: Patient

String id;
String name;
String appointmentDate;
String type;  // Regular or Emergency


Endpoints:
1. Add patient to the end of the list
2. View all patient appointments
3. Add emergency patient at the beginning
4. Get details of a specific patient (by ID)
5. Update appointment details (name or type)
6. Cancel appointment
7. Move a patient to the top of the list (manual priority bump)
8. Add a patient at a specific position (start/mid/end)

---------------------------------------------------------------------------------------

 üß† == HashMap Based ==



 ‚úÖ 1. Online Course Management API

Objective:
Map courses to enrolled students.

Concepts:
- `HashMap<String, List<Student>>` (course ‚Üí list of students)
- Interface: `Enrollable` with method `enroll()`
- Polymorphism: `FreeCourse`, `PaidCourse`

Model: Student
String id;
String name;
String email;


Model: Course
String courseId;
String title;
String type;  // Free or Paid

Endpoints:
1. Enroll student in course
2. List all students in a course
3. Get courses by student
4. Update student details
5. Remove student from course
6. Delete course



 ‚úÖ 2. City Transport API

Objective:
Track transport modes available in each city.

Concepts:
- `HashMap<String, List<Transport>>` (city ‚Üí transports)
- Interface: `Transportable` with method `move()`
- Polymorphism: `Bus`, `Metro`, `Bike`

Model: Transport

String id;
String type;  // Bus, Metro, Bike
String operatorName;


Endpoints:
1. Add transport to a city
2. Get transports in a city
3. Get city info by transport type
4. Update transport type
5. Remove transport from city
6. Delete city data



 üîê == HashSet Based ==



 ‚úÖ 1. Employee Attendance System API

Objective:
Prevent duplicate daily check-ins.

Concepts:
- `HashSet<String>` to store employee IDs who checked in
- Interface: `Checkable` with `checkIn()` method
- Encapsulation for employee details

Model: Employee
String id;
String name;
String department;


Endpoints:
1. Check-in an employee
2. Get all who checked in today
3. Check if an employee already checked in
4. Update employee name
5. Remove check-in
6. Reset daily attendance



 ‚úÖ 2. Product Catalog API

Objective:
Ensure all products have unique names.

Concepts:
- `HashSet<Product>` with overridden `equals()` and `hashCode()`
- Interface: `Catalogable` with `addToCatalog()` method
- Inheritance: `Electronics`, `Clothing`

Model: Product
String id;
String name;
double price;
String category;  // Electronics or Clothing

Endpoints:
1. Add product
2. Get all products
3. Check if product exists
4. Update product price
5. Remove product
6. Clear catalog



