
 Map Interface in Java
Map Interface in Java represents a collection that stores unique key-value pairs,
 providing fast data retrieval and manipulation. It is essential for scenarios where
  data needs to be accessed using specific keys.

==========================================================

 Use Case:
 It is commonly used for managing user profiles, storing application configurations,
  handling request parameters in web applications, and implementing caching systems
   for quick access to frequently used data.

=====================================================================

 Important Methods of Map Interface:
1. `put(K key, V value)`: Adds a key-value pair to the map. If the key exists, its value is updated.
2. `get(Object key)`: Returns the value associated with the key, or `null` if not found.
3. `remove(Object key)`: Removes the key-value pair for the specified key.
4. `containsKey(Object key)`: Returns `true` if the key is present in the map.
5. `containsValue(Object value)`: Returns `true` if the map contains the specified value.
6. `size()`: Returns the number of key-value pairs.
7. `isEmpty()`: Returns `true` if the map is empty.
8. `keySet()`: Returns a `Set` of all keys.
9. `values()`: Returns a `Collection` of all values.
10. `entrySet()`: Returns a `Set` of all key-value pairs as `Map.Entry` objects.

=======================================================================================

 HashMap in Java
HashMap is a widely used implementation of the Map interface in Java that stores key-value
 pairs using hashing for fast access. It is unordered, meaning that the order of elements is
  not guaranteed. A key feature of HashMap is that it allows one null key and multiple null
  values, providing flexibility for handling null data. HashMap is typically used in situations
   where efficient management of key-value mappings is necessary, offering quick retrieval of values
    associated with unique keys.

===================================================================

 Use Case:
 Common uses include managing user sessions, storing configuration settings, and handling null data where needed.

==========================================================================

 Important Methods of HashMap:
1. `putIfAbsent(K key, V value)`: Adds a key-value pair only if the key is not already present.
2. `getOrDefault(Object key, V defaultValue)`: Returns the value for the key or a default value if the
 key is not found.
3. `replace(K key, V value)`: Replaces the value for the key if it exists.



